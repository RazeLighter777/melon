<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1046" onload="init(evt)" viewBox="0 0 1200 1046" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1046" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1029.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="1029.00"> </text><svg id="frames" x="10" width="1180" total_samples="1666"><g><title>[[heap]] (5 samples, 0.30%)</title><rect x="0.0000%" y="965" width="0.3001%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="975.50"></text></g><g><title>[libc.so.6] (5 samples, 0.30%)</title><rect x="0.0000%" y="949" width="0.3001%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="5"/><text x="0.2500%" y="959.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 0.36%)</title><rect x="0.3001%" y="965" width="0.3601%" height="15" fill="rgb(221,193,54)" fg:x="5" fg:w="6"/><text x="0.5501%" y="975.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.06%)</title><rect x="0.6002%" y="949" width="0.0600%" height="15" fill="rgb(248,212,6)" fg:x="10" fg:w="1"/><text x="0.8502%" y="959.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.06%)</title><rect x="0.6002%" y="933" width="0.0600%" height="15" fill="rgb(208,68,35)" fg:x="10" fg:w="1"/><text x="0.8502%" y="943.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.06%)</title><rect x="0.6002%" y="917" width="0.0600%" height="15" fill="rgb(232,128,0)" fg:x="10" fg:w="1"/><text x="0.8502%" y="927.50"></text></g><g><title>ecs-304175c1a45 (12 samples, 0.72%)</title><rect x="0.0000%" y="981" width="0.7203%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="12"/><text x="0.2500%" y="991.50"></text></g><g><title>_start (1 samples, 0.06%)</title><rect x="0.6603%" y="965" width="0.0600%" height="15" fill="rgb(228,23,34)" fg:x="11" fg:w="1"/><text x="0.9103%" y="975.50"></text></g><g><title>__libc_start_main (1 samples, 0.06%)</title><rect x="0.6603%" y="949" width="0.0600%" height="15" fill="rgb(218,30,26)" fg:x="11" fg:w="1"/><text x="0.9103%" y="959.50"></text></g><g><title>[libc.so.6] (1 samples, 0.06%)</title><rect x="0.6603%" y="933" width="0.0600%" height="15" fill="rgb(220,122,19)" fg:x="11" fg:w="1"/><text x="0.9103%" y="943.50"></text></g><g><title>main (1 samples, 0.06%)</title><rect x="0.6603%" y="917" width="0.0600%" height="15" fill="rgb(250,228,42)" fg:x="11" fg:w="1"/><text x="0.9103%" y="927.50"></text></g><g><title>pthread_getattr_np (1 samples, 0.06%)</title><rect x="0.6603%" y="901" width="0.0600%" height="15" fill="rgb(240,193,28)" fg:x="11" fg:w="1"/><text x="0.9103%" y="911.50"></text></g><g><title>__isoc99_sscanf (1 samples, 0.06%)</title><rect x="0.6603%" y="885" width="0.0600%" height="15" fill="rgb(216,20,37)" fg:x="11" fg:w="1"/><text x="0.9103%" y="895.50"></text></g><g><title>[libc.so.6] (1 samples, 0.06%)</title><rect x="0.6603%" y="869" width="0.0600%" height="15" fill="rgb(206,188,39)" fg:x="11" fg:w="1"/><text x="0.9103%" y="879.50"></text></g><g><title>&lt;rayon::iter::extend::ListReducer as rayon::iter::plumbing::Reducer&lt;alloc::collections::linked_list::LinkedList&lt;T&gt;&gt;&gt;::reduce (2 samples, 0.12%)</title><rect x="0.7203%" y="949" width="0.1200%" height="15" fill="rgb(217,207,13)" fg:x="12" fg:w="2"/><text x="0.9703%" y="959.50"></text></g><g><title>[libc.so.6] (42 samples, 2.52%)</title><rect x="0.8403%" y="949" width="2.5210%" height="15" fill="rgb(231,73,38)" fg:x="14" fg:w="42"/><text x="1.0903%" y="959.50">[l..</text></g><g><title>_rjem_sdallocx (1 samples, 0.06%)</title><rect x="3.3613%" y="949" width="0.0600%" height="15" fill="rgb(225,20,46)" fg:x="56" fg:w="1"/><text x="3.6113%" y="959.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.06%)</title><rect x="3.4214%" y="949" width="0.0600%" height="15" fill="rgb(210,31,41)" fg:x="57" fg:w="1"/><text x="3.6714%" y="959.50"></text></g><g><title>crossbeam_deque::deque::Worker&lt;T&gt;::pop (1 samples, 0.06%)</title><rect x="3.4814%" y="949" width="0.0600%" height="15" fill="rgb(221,200,47)" fg:x="58" fg:w="1"/><text x="3.7314%" y="959.50"></text></g><g><title>crossbeam_epoch::default::with_handle (8 samples, 0.48%)</title><rect x="3.5414%" y="949" width="0.4802%" height="15" fill="rgb(226,26,5)" fg:x="59" fg:w="8"/><text x="3.7914%" y="959.50"></text></g><g><title>melon::world::World::execute_changes (2 samples, 0.12%)</title><rect x="4.0216%" y="949" width="0.1200%" height="15" fill="rgb(249,33,26)" fg:x="67" fg:w="2"/><text x="4.2716%" y="959.50"></text></g><g><title>rayon_core::registry::Registry::in_worker_cold (2 samples, 0.12%)</title><rect x="4.1417%" y="949" width="0.1200%" height="15" fill="rgb(235,183,28)" fg:x="69" fg:w="2"/><text x="4.3917%" y="959.50"></text></g><g><title>[anon] (68 samples, 4.08%)</title><rect x="0.7203%" y="965" width="4.0816%" height="15" fill="rgb(221,5,38)" fg:x="12" fg:w="68"/><text x="0.9703%" y="975.50">[ano..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (9 samples, 0.54%)</title><rect x="4.2617%" y="949" width="0.5402%" height="15" fill="rgb(247,18,42)" fg:x="71" fg:w="9"/><text x="4.5117%" y="959.50"></text></g><g><title>_rjem_je_malloc_mutex_init (1 samples, 0.06%)</title><rect x="5.1020%" y="629" width="0.0600%" height="15" fill="rgb(241,131,45)" fg:x="85" fg:w="1"/><text x="5.3520%" y="639.50"></text></g><g><title>pthread_mutexattr_destroy (1 samples, 0.06%)</title><rect x="5.1020%" y="613" width="0.0600%" height="15" fill="rgb(249,31,29)" fg:x="85" fg:w="1"/><text x="5.3520%" y="623.50"></text></g><g><title>os_pages_map (10 samples, 0.60%)</title><rect x="5.2221%" y="565" width="0.6002%" height="15" fill="rgb(225,111,53)" fg:x="87" fg:w="10"/><text x="5.4721%" y="575.50"></text></g><g><title>__mmap (10 samples, 0.60%)</title><rect x="5.2221%" y="549" width="0.6002%" height="15" fill="rgb(238,160,17)" fg:x="87" fg:w="10"/><text x="5.4721%" y="559.50"></text></g><g><title>arena_init_locked (14 samples, 0.84%)</title><rect x="5.0420%" y="677" width="0.8403%" height="15" fill="rgb(214,148,48)" fg:x="84" fg:w="14"/><text x="5.2920%" y="687.50"></text></g><g><title>_rjem_je_arena_new (14 samples, 0.84%)</title><rect x="5.0420%" y="661" width="0.8403%" height="15" fill="rgb(232,36,49)" fg:x="84" fg:w="14"/><text x="5.2920%" y="671.50"></text></g><g><title>_rjem_je_base_new (14 samples, 0.84%)</title><rect x="5.0420%" y="645" width="0.8403%" height="15" fill="rgb(209,103,24)" fg:x="84" fg:w="14"/><text x="5.2920%" y="655.50"></text></g><g><title>base_block_alloc (12 samples, 0.72%)</title><rect x="5.1621%" y="629" width="0.7203%" height="15" fill="rgb(229,88,8)" fg:x="86" fg:w="12"/><text x="5.4121%" y="639.50"></text></g><g><title>base_map (12 samples, 0.72%)</title><rect x="5.1621%" y="613" width="0.7203%" height="15" fill="rgb(213,181,19)" fg:x="86" fg:w="12"/><text x="5.4121%" y="623.50"></text></g><g><title>_rjem_je_extent_alloc_mmap (11 samples, 0.66%)</title><rect x="5.2221%" y="597" width="0.6603%" height="15" fill="rgb(254,191,54)" fg:x="87" fg:w="11"/><text x="5.4721%" y="607.50"></text></g><g><title>_rjem_je_pages_map (11 samples, 0.66%)</title><rect x="5.2221%" y="581" width="0.6603%" height="15" fill="rgb(241,83,37)" fg:x="87" fg:w="11"/><text x="5.4721%" y="591.50"></text></g><g><title>pages_map_slow (1 samples, 0.06%)</title><rect x="5.8223%" y="565" width="0.0600%" height="15" fill="rgb(233,36,39)" fg:x="97" fg:w="1"/><text x="6.0723%" y="575.50"></text></g><g><title>os_pages_trim (1 samples, 0.06%)</title><rect x="5.8223%" y="549" width="0.0600%" height="15" fill="rgb(226,3,54)" fg:x="97" fg:w="1"/><text x="6.0723%" y="559.50"></text></g><g><title>malloc_mutex_lock_final (20 samples, 1.20%)</title><rect x="5.8824%" y="645" width="1.2005%" height="15" fill="rgb(245,192,40)" fg:x="98" fg:w="20"/><text x="6.1324%" y="655.50"></text></g><g><title>pthread_mutex_lock (20 samples, 1.20%)</title><rect x="5.8824%" y="629" width="1.2005%" height="15" fill="rgb(238,167,29)" fg:x="98" fg:w="20"/><text x="6.1324%" y="639.50"></text></g><g><title>[libc.so.6] (20 samples, 1.20%)</title><rect x="5.8824%" y="613" width="1.2005%" height="15" fill="rgb(232,182,51)" fg:x="98" fg:w="20"/><text x="6.1324%" y="623.50"></text></g><g><title>malloc_mutex_trylock_final (1 samples, 0.06%)</title><rect x="7.0828%" y="645" width="0.0600%" height="15" fill="rgb(231,60,39)" fg:x="118" fg:w="1"/><text x="7.3328%" y="655.50"></text></g><g><title>pthread_mutex_trylock (1 samples, 0.06%)</title><rect x="7.0828%" y="629" width="0.0600%" height="15" fill="rgb(208,69,12)" fg:x="118" fg:w="1"/><text x="7.3328%" y="639.50"></text></g><g><title>arena_choose (39 samples, 2.34%)</title><rect x="4.9820%" y="725" width="2.3409%" height="15" fill="rgb(235,93,37)" fg:x="83" fg:w="39"/><text x="5.2320%" y="735.50">a..</text></g><g><title>arena_choose_impl (39 samples, 2.34%)</title><rect x="4.9820%" y="709" width="2.3409%" height="15" fill="rgb(213,116,39)" fg:x="83" fg:w="39"/><text x="5.2320%" y="719.50">a..</text></g><g><title>_rjem_je_arena_choose_hard (39 samples, 2.34%)</title><rect x="4.9820%" y="693" width="2.3409%" height="15" fill="rgb(222,207,29)" fg:x="83" fg:w="39"/><text x="5.2320%" y="703.50">_..</text></g><g><title>malloc_mutex_lock (24 samples, 1.44%)</title><rect x="5.8824%" y="677" width="1.4406%" height="15" fill="rgb(206,96,30)" fg:x="98" fg:w="24"/><text x="6.1324%" y="687.50"></text></g><g><title>_rjem_je_malloc_mutex_lock_slow (24 samples, 1.44%)</title><rect x="5.8824%" y="661" width="1.4406%" height="15" fill="rgb(218,138,4)" fg:x="98" fg:w="24"/><text x="6.1324%" y="671.50"></text></g><g><title>spin_cpu_spinwait (3 samples, 0.18%)</title><rect x="7.1429%" y="645" width="0.1801%" height="15" fill="rgb(250,191,14)" fg:x="119" fg:w="3"/><text x="7.3929%" y="655.50"></text></g><g><title>_rjem_mallocx (41 samples, 2.46%)</title><rect x="4.9820%" y="853" width="2.4610%" height="15" fill="rgb(239,60,40)" fg:x="83" fg:w="41"/><text x="5.2320%" y="863.50">_r..</text></g><g><title>imalloc (41 samples, 2.46%)</title><rect x="4.9820%" y="837" width="2.4610%" height="15" fill="rgb(206,27,48)" fg:x="83" fg:w="41"/><text x="5.2320%" y="847.50">im..</text></g><g><title>tsd_fetch (41 samples, 2.46%)</title><rect x="4.9820%" y="821" width="2.4610%" height="15" fill="rgb(225,35,8)" fg:x="83" fg:w="41"/><text x="5.2320%" y="831.50">ts..</text></g><g><title>tsd_fetch_impl (41 samples, 2.46%)</title><rect x="4.9820%" y="805" width="2.4610%" height="15" fill="rgb(250,213,24)" fg:x="83" fg:w="41"/><text x="5.2320%" y="815.50">ts..</text></g><g><title>_rjem_je_tsd_fetch_slow (41 samples, 2.46%)</title><rect x="4.9820%" y="789" width="2.4610%" height="15" fill="rgb(247,123,22)" fg:x="83" fg:w="41"/><text x="5.2320%" y="799.50">_r..</text></g><g><title>tsd_data_init (41 samples, 2.46%)</title><rect x="4.9820%" y="773" width="2.4610%" height="15" fill="rgb(231,138,38)" fg:x="83" fg:w="41"/><text x="5.2320%" y="783.50">ts..</text></g><g><title>_rjem_je_tsd_tcache_enabled_data_init (41 samples, 2.46%)</title><rect x="4.9820%" y="757" width="2.4610%" height="15" fill="rgb(231,145,46)" fg:x="83" fg:w="41"/><text x="5.2320%" y="767.50">_r..</text></g><g><title>_rjem_je_tsd_tcache_data_init (41 samples, 2.46%)</title><rect x="4.9820%" y="741" width="2.4610%" height="15" fill="rgb(251,118,11)" fg:x="83" fg:w="41"/><text x="5.2320%" y="751.50">_r..</text></g><g><title>ipallocztm (2 samples, 0.12%)</title><rect x="7.3229%" y="725" width="0.1200%" height="15" fill="rgb(217,147,25)" fg:x="122" fg:w="2"/><text x="7.5729%" y="735.50"></text></g><g><title>_rjem_je_large_palloc (2 samples, 0.12%)</title><rect x="7.3229%" y="709" width="0.1200%" height="15" fill="rgb(247,81,37)" fg:x="122" fg:w="2"/><text x="7.5729%" y="719.50"></text></g><g><title>_rjem_je_arena_extent_alloc_large (1 samples, 0.06%)</title><rect x="7.3830%" y="693" width="0.0600%" height="15" fill="rgb(209,12,38)" fg:x="123" fg:w="1"/><text x="7.6330%" y="703.50"></text></g><g><title>extent_recycle (1 samples, 0.06%)</title><rect x="7.3830%" y="677" width="0.0600%" height="15" fill="rgb(227,1,9)" fg:x="123" fg:w="1"/><text x="7.6330%" y="687.50"></text></g><g><title>extent_recycle_extract (1 samples, 0.06%)</title><rect x="7.3830%" y="661" width="0.0600%" height="15" fill="rgb(248,47,43)" fg:x="123" fg:w="1"/><text x="7.6330%" y="671.50"></text></g><g><title>extent_hooks_assure_initialized (1 samples, 0.06%)</title><rect x="7.3830%" y="645" width="0.0600%" height="15" fill="rgb(221,10,30)" fg:x="123" fg:w="1"/><text x="7.6330%" y="655.50"></text></g><g><title>extent_hooks_assure_initialized (1 samples, 0.06%)</title><rect x="7.3830%" y="629" width="0.0600%" height="15" fill="rgb(210,229,1)" fg:x="123" fg:w="1"/><text x="7.6330%" y="639.50"></text></g><g><title>_rjem_je_extent_hooks_get (1 samples, 0.06%)</title><rect x="7.3830%" y="613" width="0.0600%" height="15" fill="rgb(222,148,37)" fg:x="123" fg:w="1"/><text x="7.6330%" y="623.50"></text></g><g><title>&lt;&amp;L as rayon_core::latch::Latch&gt;::set (3 samples, 0.18%)</title><rect x="16.6267%" y="821" width="0.1801%" height="15" fill="rgb(234,67,33)" fg:x="277" fg:w="3"/><text x="16.8767%" y="831.50"></text></g><g><title>crossbeam_deque::deque::Worker&lt;T&gt;::pop (5 samples, 0.30%)</title><rect x="17.0468%" y="789" width="0.3001%" height="15" fill="rgb(247,98,35)" fg:x="284" fg:w="5"/><text x="17.2968%" y="799.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (11 samples, 0.66%)</title><rect x="16.8067%" y="821" width="0.6603%" height="15" fill="rgb(247,138,52)" fg:x="280" fg:w="11"/><text x="17.0567%" y="831.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (8 samples, 0.48%)</title><rect x="16.9868%" y="805" width="0.4802%" height="15" fill="rgb(213,79,30)" fg:x="283" fg:w="8"/><text x="17.2368%" y="815.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (2 samples, 0.12%)</title><rect x="17.3469%" y="789" width="0.1200%" height="15" fill="rgb(246,177,23)" fg:x="289" fg:w="2"/><text x="17.5969%" y="799.50"></text></g><g><title>crossbeam_deque::deque::Worker&lt;T&gt;::pop (1 samples, 0.06%)</title><rect x="17.6471%" y="805" width="0.0600%" height="15" fill="rgb(230,62,27)" fg:x="294" fg:w="1"/><text x="17.8971%" y="815.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (2 samples, 0.12%)</title><rect x="17.7071%" y="805" width="0.1200%" height="15" fill="rgb(216,154,8)" fg:x="295" fg:w="2"/><text x="17.9571%" y="815.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (2 samples, 0.12%)</title><rect x="17.7071%" y="789" width="0.1200%" height="15" fill="rgb(244,35,45)" fg:x="295" fg:w="2"/><text x="17.9571%" y="799.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (2 samples, 0.12%)</title><rect x="17.7071%" y="773" width="0.1200%" height="15" fill="rgb(251,115,12)" fg:x="295" fg:w="2"/><text x="17.9571%" y="783.50"></text></g><g><title>core::iter::adapters::filter::filter_try_fold::{{closure}} (2 samples, 0.12%)</title><rect x="17.7071%" y="757" width="0.1200%" height="15" fill="rgb(240,54,50)" fg:x="295" fg:w="2"/><text x="17.9571%" y="767.50"></text></g><g><title>core::iter::adapters::filter::filter_try_fold::{{closure}} (11 samples, 0.66%)</title><rect x="17.8271%" y="789" width="0.6603%" height="15" fill="rgb(233,84,52)" fg:x="297" fg:w="11"/><text x="18.0771%" y="799.50"></text></g><g><title>crossbeam_epoch::default::with_handle (9 samples, 0.54%)</title><rect x="17.9472%" y="773" width="0.5402%" height="15" fill="rgb(207,117,47)" fg:x="299" fg:w="9"/><text x="18.1972%" y="783.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (1 samples, 0.06%)</title><rect x="18.4274%" y="757" width="0.0600%" height="15" fill="rgb(249,43,39)" fg:x="307" fg:w="1"/><text x="18.6774%" y="767.50"></text></g><g><title>__rust_probestack (1 samples, 0.06%)</title><rect x="18.4274%" y="741" width="0.0600%" height="15" fill="rgb(209,38,44)" fg:x="307" fg:w="1"/><text x="18.6774%" y="751.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (36 samples, 2.16%)</title><rect x="16.3866%" y="837" width="2.1609%" height="15" fill="rgb(236,212,23)" fg:x="273" fg:w="36"/><text x="16.6366%" y="847.50">&lt;..</text></g><g><title>rayon_core::join::join_context::{{closure}} (18 samples, 1.08%)</title><rect x="17.4670%" y="821" width="1.0804%" height="15" fill="rgb(242,79,21)" fg:x="291" fg:w="18"/><text x="17.7170%" y="831.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (12 samples, 0.72%)</title><rect x="17.8271%" y="805" width="0.7203%" height="15" fill="rgb(211,96,35)" fg:x="297" fg:w="12"/><text x="18.0771%" y="815.50"></text></g><g><title>rayon_core::sleep::Sleep::wake_any_threads (1 samples, 0.06%)</title><rect x="18.4874%" y="789" width="0.0600%" height="15" fill="rgb(253,215,40)" fg:x="308" fg:w="1"/><text x="18.7374%" y="799.50"></text></g><g><title>rayon_core::sleep::Sleep::wake_specific_thread (1 samples, 0.06%)</title><rect x="18.4874%" y="773" width="0.0600%" height="15" fill="rgb(211,81,21)" fg:x="308" fg:w="1"/><text x="18.7374%" y="783.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (1 samples, 0.06%)</title><rect x="18.4874%" y="757" width="0.0600%" height="15" fill="rgb(208,190,38)" fg:x="308" fg:w="1"/><text x="18.7374%" y="767.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (1 samples, 0.06%)</title><rect x="18.4874%" y="741" width="0.0600%" height="15" fill="rgb(235,213,38)" fg:x="308" fg:w="1"/><text x="18.7374%" y="751.50"></text></g><g><title>core::hint::spin_loop (1 samples, 0.06%)</title><rect x="18.4874%" y="725" width="0.0600%" height="15" fill="rgb(237,122,38)" fg:x="308" fg:w="1"/><text x="18.7374%" y="735.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (1 samples, 0.06%)</title><rect x="18.4874%" y="709" width="0.0600%" height="15" fill="rgb(244,218,35)" fg:x="308" fg:w="1"/><text x="18.7374%" y="719.50"></text></g><g><title>__sched_yield (33 samples, 1.98%)</title><rect x="18.5474%" y="837" width="1.9808%" height="15" fill="rgb(240,68,47)" fg:x="309" fg:w="33"/><text x="18.7974%" y="847.50">_..</text></g><g><title>crossbeam_epoch::default::with_handle (391 samples, 23.47%)</title><rect x="29.2917%" y="821" width="23.4694%" height="15" fill="rgb(210,16,53)" fg:x="488" fg:w="391"/><text x="29.5417%" y="831.50">crossbeam_epoch::default::with_handle</text></g><g><title>crossbeam_epoch::internal::Global::collect (70 samples, 4.20%)</title><rect x="48.5594%" y="805" width="4.2017%" height="15" fill="rgb(235,124,12)" fg:x="809" fg:w="70"/><text x="48.8094%" y="815.50">cross..</text></g><g><title>crossbeam_epoch::internal::Global::try_advance (68 samples, 4.08%)</title><rect x="48.6795%" y="789" width="4.0816%" height="15" fill="rgb(224,169,11)" fg:x="811" fg:w="68"/><text x="48.9295%" y="799.50">cros..</text></g><g><title>__cxa_thread_atexit_impl (1 samples, 0.06%)</title><rect x="52.7611%" y="805" width="0.0600%" height="15" fill="rgb(250,166,2)" fg:x="879" fg:w="1"/><text x="53.0111%" y="815.50"></text></g><g><title>__libc_calloc (1 samples, 0.06%)</title><rect x="52.7611%" y="789" width="0.0600%" height="15" fill="rgb(242,216,29)" fg:x="879" fg:w="1"/><text x="53.0111%" y="799.50"></text></g><g><title>core::iter::adapters::filter::filter_try_fold::{{closure}} (544 samples, 32.65%)</title><rect x="20.5282%" y="837" width="32.6531%" height="15" fill="rgb(230,116,27)" fg:x="342" fg:w="544"/><text x="20.7782%" y="847.50">core::iter::adapters::filter::filter_try_fold::{{clos..</text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::try_initialize (7 samples, 0.42%)</title><rect x="52.7611%" y="821" width="0.4202%" height="15" fill="rgb(228,99,48)" fg:x="879" fg:w="7"/><text x="53.0111%" y="831.50"></text></g><g><title>crossbeam_epoch::collector::Collector::register (6 samples, 0.36%)</title><rect x="52.8211%" y="805" width="0.3601%" height="15" fill="rgb(253,11,6)" fg:x="880" fg:w="6"/><text x="53.0711%" y="815.50"></text></g><g><title>_rjem_mallocx (1 samples, 0.06%)</title><rect x="53.1212%" y="789" width="0.0600%" height="15" fill="rgb(247,143,39)" fg:x="885" fg:w="1"/><text x="53.3712%" y="799.50"></text></g><g><title>imalloc (1 samples, 0.06%)</title><rect x="53.1212%" y="773" width="0.0600%" height="15" fill="rgb(236,97,10)" fg:x="885" fg:w="1"/><text x="53.3712%" y="783.50"></text></g><g><title>imalloc_body (1 samples, 0.06%)</title><rect x="53.1212%" y="757" width="0.0600%" height="15" fill="rgb(233,208,19)" fg:x="885" fg:w="1"/><text x="53.3712%" y="767.50"></text></g><g><title>imalloc_no_sample (1 samples, 0.06%)</title><rect x="53.1212%" y="741" width="0.0600%" height="15" fill="rgb(216,164,2)" fg:x="885" fg:w="1"/><text x="53.3712%" y="751.50"></text></g><g><title>iallocztm (1 samples, 0.06%)</title><rect x="53.1212%" y="725" width="0.0600%" height="15" fill="rgb(220,129,5)" fg:x="885" fg:w="1"/><text x="53.3712%" y="735.50"></text></g><g><title>arena_malloc (1 samples, 0.06%)</title><rect x="53.1212%" y="709" width="0.0600%" height="15" fill="rgb(242,17,10)" fg:x="885" fg:w="1"/><text x="53.3712%" y="719.50"></text></g><g><title>tcache_alloc_small (1 samples, 0.06%)</title><rect x="53.1212%" y="693" width="0.0600%" height="15" fill="rgb(242,107,0)" fg:x="885" fg:w="1"/><text x="53.3712%" y="703.50"></text></g><g><title>_rjem_je_tcache_alloc_small_hard (1 samples, 0.06%)</title><rect x="53.1212%" y="677" width="0.0600%" height="15" fill="rgb(251,28,31)" fg:x="885" fg:w="1"/><text x="53.3712%" y="687.50"></text></g><g><title>_rjem_je_arena_tcache_fill_small (1 samples, 0.06%)</title><rect x="53.1212%" y="661" width="0.0600%" height="15" fill="rgb(233,223,10)" fg:x="885" fg:w="1"/><text x="53.3712%" y="671.50"></text></g><g><title>arena_bin_malloc_hard (1 samples, 0.06%)</title><rect x="53.1212%" y="645" width="0.0600%" height="15" fill="rgb(215,21,27)" fg:x="885" fg:w="1"/><text x="53.3712%" y="655.50"></text></g><g><title>arena_bin_nonfull_slab_get (1 samples, 0.06%)</title><rect x="53.1212%" y="629" width="0.0600%" height="15" fill="rgb(232,23,21)" fg:x="885" fg:w="1"/><text x="53.3712%" y="639.50"></text></g><g><title>arena_slab_alloc (1 samples, 0.06%)</title><rect x="53.1212%" y="613" width="0.0600%" height="15" fill="rgb(244,5,23)" fg:x="885" fg:w="1"/><text x="53.3712%" y="623.50"></text></g><g><title>arena_slab_alloc_hard (1 samples, 0.06%)</title><rect x="53.1212%" y="597" width="0.0600%" height="15" fill="rgb(226,81,46)" fg:x="885" fg:w="1"/><text x="53.3712%" y="607.50"></text></g><g><title>_rjem_je_extent_alloc_wrapper (1 samples, 0.06%)</title><rect x="53.1212%" y="581" width="0.0600%" height="15" fill="rgb(247,70,30)" fg:x="885" fg:w="1"/><text x="53.3712%" y="591.50"></text></g><g><title>extent_alloc_retained (1 samples, 0.06%)</title><rect x="53.1212%" y="565" width="0.0600%" height="15" fill="rgb(212,68,19)" fg:x="885" fg:w="1"/><text x="53.3712%" y="575.50"></text></g><g><title>extent_recycle (1 samples, 0.06%)</title><rect x="53.1212%" y="549" width="0.0600%" height="15" fill="rgb(240,187,13)" fg:x="885" fg:w="1"/><text x="53.3712%" y="559.50"></text></g><g><title>extent_recycle_split (1 samples, 0.06%)</title><rect x="53.1212%" y="533" width="0.0600%" height="15" fill="rgb(223,113,26)" fg:x="885" fg:w="1"/><text x="53.3712%" y="543.50"></text></g><g><title>extent_split_interior (1 samples, 0.06%)</title><rect x="53.1212%" y="517" width="0.0600%" height="15" fill="rgb(206,192,2)" fg:x="885" fg:w="1"/><text x="53.3712%" y="527.50"></text></g><g><title>extent_split_impl (1 samples, 0.06%)</title><rect x="53.1212%" y="501" width="0.0600%" height="15" fill="rgb(241,108,4)" fg:x="885" fg:w="1"/><text x="53.3712%" y="511.50"></text></g><g><title>_rjem_je_extent_alloc (1 samples, 0.06%)</title><rect x="53.1212%" y="485" width="0.0600%" height="15" fill="rgb(247,173,49)" fg:x="885" fg:w="1"/><text x="53.3712%" y="495.50"></text></g><g><title>_rjem_je_extent_alloc (1 samples, 0.06%)</title><rect x="53.1212%" y="469" width="0.0600%" height="15" fill="rgb(224,114,35)" fg:x="885" fg:w="1"/><text x="53.3712%" y="479.50"></text></g><g><title>_rjem_je_base_alloc_extent (1 samples, 0.06%)</title><rect x="53.1212%" y="453" width="0.0600%" height="15" fill="rgb(245,159,27)" fg:x="885" fg:w="1"/><text x="53.3712%" y="463.50"></text></g><g><title>rayon_core::sleep::Sleep::sleep (354 samples, 21.25%)</title><rect x="53.1813%" y="837" width="21.2485%" height="15" fill="rgb(245,172,44)" fg:x="886" fg:w="354"/><text x="53.4313%" y="847.50">rayon_core::sleep::Sleep::sleep</text></g><g><title>syscall (313 samples, 18.79%)</title><rect x="55.6423%" y="821" width="18.7875%" height="15" fill="rgb(236,23,11)" fg:x="927" fg:w="313"/><text x="55.8923%" y="831.50">syscall</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (1 samples, 0.06%)</title><rect x="74.7299%" y="805" width="0.0600%" height="15" fill="rgb(205,117,38)" fg:x="1245" fg:w="1"/><text x="74.9799%" y="815.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (1 samples, 0.06%)</title><rect x="74.7299%" y="789" width="0.0600%" height="15" fill="rgb(237,72,25)" fg:x="1245" fg:w="1"/><text x="74.9799%" y="799.50"></text></g><g><title>core::hint::spin_loop (1 samples, 0.06%)</title><rect x="74.7299%" y="773" width="0.0600%" height="15" fill="rgb(244,70,9)" fg:x="1245" fg:w="1"/><text x="74.9799%" y="783.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (1 samples, 0.06%)</title><rect x="74.7299%" y="757" width="0.0600%" height="15" fill="rgb(217,125,39)" fg:x="1245" fg:w="1"/><text x="74.9799%" y="767.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,164 samples, 69.87%)</title><rect x="4.9820%" y="869" width="69.8679%" height="15" fill="rgb(235,36,10)" fg:x="83" fg:w="1164"/><text x="5.2320%" y="879.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (1,123 samples, 67.41%)</title><rect x="7.4430%" y="853" width="67.4070%" height="15" fill="rgb(251,123,47)" fg:x="124" fg:w="1123"/><text x="7.6930%" y="863.50">rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>rayon_core::sleep::Sleep::wake_any_threads (7 samples, 0.42%)</title><rect x="74.4298%" y="837" width="0.4202%" height="15" fill="rgb(221,13,13)" fg:x="1240" fg:w="7"/><text x="74.6798%" y="847.50"></text></g><g><title>rayon_core::sleep::Sleep::wake_specific_thread (7 samples, 0.42%)</title><rect x="74.4298%" y="821" width="0.4202%" height="15" fill="rgb(238,131,9)" fg:x="1240" fg:w="7"/><text x="74.6798%" y="831.50"></text></g><g><title>syscall (1 samples, 0.06%)</title><rect x="74.7899%" y="805" width="0.0600%" height="15" fill="rgb(211,50,8)" fg:x="1246" fg:w="1"/><text x="75.0399%" y="815.50"></text></g><g><title>_rjem_mallocx (2 samples, 0.12%)</title><rect x="75.1501%" y="389" width="0.1200%" height="15" fill="rgb(245,182,24)" fg:x="1252" fg:w="2"/><text x="75.4001%" y="399.50"></text></g><g><title>imalloc (2 samples, 0.12%)</title><rect x="75.1501%" y="373" width="0.1200%" height="15" fill="rgb(242,14,37)" fg:x="1252" fg:w="2"/><text x="75.4001%" y="383.50"></text></g><g><title>imalloc_body (2 samples, 0.12%)</title><rect x="75.1501%" y="357" width="0.1200%" height="15" fill="rgb(246,228,12)" fg:x="1252" fg:w="2"/><text x="75.4001%" y="367.50"></text></g><g><title>imalloc_no_sample (2 samples, 0.12%)</title><rect x="75.1501%" y="341" width="0.1200%" height="15" fill="rgb(213,55,15)" fg:x="1252" fg:w="2"/><text x="75.4001%" y="351.50"></text></g><g><title>iallocztm (2 samples, 0.12%)</title><rect x="75.1501%" y="325" width="0.1200%" height="15" fill="rgb(209,9,3)" fg:x="1252" fg:w="2"/><text x="75.4001%" y="335.50"></text></g><g><title>arena_malloc (2 samples, 0.12%)</title><rect x="75.1501%" y="309" width="0.1200%" height="15" fill="rgb(230,59,30)" fg:x="1252" fg:w="2"/><text x="75.4001%" y="319.50"></text></g><g><title>tcache_alloc_small (2 samples, 0.12%)</title><rect x="75.1501%" y="293" width="0.1200%" height="15" fill="rgb(209,121,21)" fg:x="1252" fg:w="2"/><text x="75.4001%" y="303.50"></text></g><g><title>cache_bin_alloc_easy (2 samples, 0.12%)</title><rect x="75.1501%" y="277" width="0.1200%" height="15" fill="rgb(220,109,13)" fg:x="1252" fg:w="2"/><text x="75.4001%" y="287.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::default::Default&gt;::default (2 samples, 0.12%)</title><rect x="76.4106%" y="373" width="0.1200%" height="15" fill="rgb(232,18,1)" fg:x="1273" fg:w="2"/><text x="76.6606%" y="383.50"></text></g><g><title>_rjem_sdallocx (2 samples, 0.12%)</title><rect x="76.5306%" y="373" width="0.1200%" height="15" fill="rgb(215,41,42)" fg:x="1275" fg:w="2"/><text x="76.7806%" y="383.50"></text></g><g><title>isfree (2 samples, 0.12%)</title><rect x="76.5306%" y="357" width="0.1200%" height="15" fill="rgb(224,123,36)" fg:x="1275" fg:w="2"/><text x="76.7806%" y="367.50"></text></g><g><title>isdalloct (2 samples, 0.12%)</title><rect x="76.5306%" y="341" width="0.1200%" height="15" fill="rgb(240,125,3)" fg:x="1275" fg:w="2"/><text x="76.7806%" y="351.50"></text></g><g><title>arena_sdalloc (2 samples, 0.12%)</title><rect x="76.5306%" y="325" width="0.1200%" height="15" fill="rgb(205,98,50)" fg:x="1275" fg:w="2"/><text x="76.7806%" y="335.50"></text></g><g><title>tcache_dalloc_small (2 samples, 0.12%)</title><rect x="76.5306%" y="309" width="0.1200%" height="15" fill="rgb(205,185,37)" fg:x="1275" fg:w="2"/><text x="76.7806%" y="319.50"></text></g><g><title>tcache_event (1 samples, 0.06%)</title><rect x="76.5906%" y="293" width="0.0600%" height="15" fill="rgb(238,207,15)" fg:x="1276" fg:w="1"/><text x="76.8406%" y="303.50"></text></g><g><title>ticker_tick (1 samples, 0.06%)</title><rect x="76.5906%" y="277" width="0.0600%" height="15" fill="rgb(213,199,42)" fg:x="1276" fg:w="1"/><text x="76.8406%" y="287.50"></text></g><g><title>ticker_ticks (1 samples, 0.06%)</title><rect x="76.5906%" y="261" width="0.0600%" height="15" fill="rgb(235,201,11)" fg:x="1276" fg:w="1"/><text x="76.8406%" y="271.50"></text></g><g><title>arena_slab_alloc (1 samples, 0.06%)</title><rect x="76.6507%" y="149" width="0.0600%" height="15" fill="rgb(207,46,11)" fg:x="1277" fg:w="1"/><text x="76.9007%" y="159.50"></text></g><g><title>extent_recycle (1 samples, 0.06%)</title><rect x="76.6507%" y="133" width="0.0600%" height="15" fill="rgb(241,35,35)" fg:x="1277" fg:w="1"/><text x="76.9007%" y="143.50"></text></g><g><title>extent_recycle_extract (1 samples, 0.06%)</title><rect x="76.6507%" y="117" width="0.0600%" height="15" fill="rgb(243,32,47)" fg:x="1277" fg:w="1"/><text x="76.9007%" y="127.50"></text></g><g><title>extent_hooks_assure_initialized (1 samples, 0.06%)</title><rect x="76.6507%" y="101" width="0.0600%" height="15" fill="rgb(247,202,23)" fg:x="1277" fg:w="1"/><text x="76.9007%" y="111.50"></text></g><g><title>extent_hooks_assure_initialized (1 samples, 0.06%)</title><rect x="76.6507%" y="85" width="0.0600%" height="15" fill="rgb(219,102,11)" fg:x="1277" fg:w="1"/><text x="76.9007%" y="95.50"></text></g><g><title>_rjem_je_extent_hooks_get (1 samples, 0.06%)</title><rect x="76.6507%" y="69" width="0.0600%" height="15" fill="rgb(243,110,44)" fg:x="1277" fg:w="1"/><text x="76.9007%" y="79.50"></text></g><g><title>_rjem_je_base_extent_hooks_get (1 samples, 0.06%)</title><rect x="76.6507%" y="53" width="0.0600%" height="15" fill="rgb(222,74,54)" fg:x="1277" fg:w="1"/><text x="76.9007%" y="63.50"></text></g><g><title>atomic_load_p (1 samples, 0.06%)</title><rect x="76.6507%" y="37" width="0.0600%" height="15" fill="rgb(216,99,12)" fg:x="1277" fg:w="1"/><text x="76.9007%" y="47.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.12%)</title><rect x="76.6507%" y="373" width="0.1200%" height="15" fill="rgb(226,22,26)" fg:x="1277" fg:w="2"/><text x="76.9007%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.12%)</title><rect x="76.6507%" y="357" width="0.1200%" height="15" fill="rgb(217,163,10)" fg:x="1277" fg:w="2"/><text x="76.9007%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.12%)</title><rect x="76.6507%" y="341" width="0.1200%" height="15" fill="rgb(213,25,53)" fg:x="1277" fg:w="2"/><text x="76.9007%" y="351.50"></text></g><g><title>_rjem_mallocx (2 samples, 0.12%)</title><rect x="76.6507%" y="325" width="0.1200%" height="15" fill="rgb(252,105,26)" fg:x="1277" fg:w="2"/><text x="76.9007%" y="335.50"></text></g><g><title>imalloc (2 samples, 0.12%)</title><rect x="76.6507%" y="309" width="0.1200%" height="15" fill="rgb(220,39,43)" fg:x="1277" fg:w="2"/><text x="76.9007%" y="319.50"></text></g><g><title>imalloc_body (2 samples, 0.12%)</title><rect x="76.6507%" y="293" width="0.1200%" height="15" fill="rgb(229,68,48)" fg:x="1277" fg:w="2"/><text x="76.9007%" y="303.50"></text></g><g><title>imalloc_no_sample (2 samples, 0.12%)</title><rect x="76.6507%" y="277" width="0.1200%" height="15" fill="rgb(252,8,32)" fg:x="1277" fg:w="2"/><text x="76.9007%" y="287.50"></text></g><g><title>iallocztm (2 samples, 0.12%)</title><rect x="76.6507%" y="261" width="0.1200%" height="15" fill="rgb(223,20,43)" fg:x="1277" fg:w="2"/><text x="76.9007%" y="271.50"></text></g><g><title>arena_malloc (2 samples, 0.12%)</title><rect x="76.6507%" y="245" width="0.1200%" height="15" fill="rgb(229,81,49)" fg:x="1277" fg:w="2"/><text x="76.9007%" y="255.50"></text></g><g><title>tcache_alloc_small (2 samples, 0.12%)</title><rect x="76.6507%" y="229" width="0.1200%" height="15" fill="rgb(236,28,36)" fg:x="1277" fg:w="2"/><text x="76.9007%" y="239.50"></text></g><g><title>_rjem_je_tcache_alloc_small_hard (2 samples, 0.12%)</title><rect x="76.6507%" y="213" width="0.1200%" height="15" fill="rgb(249,185,26)" fg:x="1277" fg:w="2"/><text x="76.9007%" y="223.50"></text></g><g><title>_rjem_je_arena_tcache_fill_small (2 samples, 0.12%)</title><rect x="76.6507%" y="197" width="0.1200%" height="15" fill="rgb(249,174,33)" fg:x="1277" fg:w="2"/><text x="76.9007%" y="207.50"></text></g><g><title>arena_bin_malloc_hard (2 samples, 0.12%)</title><rect x="76.6507%" y="181" width="0.1200%" height="15" fill="rgb(233,201,37)" fg:x="1277" fg:w="2"/><text x="76.9007%" y="191.50"></text></g><g><title>arena_bin_nonfull_slab_get (2 samples, 0.12%)</title><rect x="76.6507%" y="165" width="0.1200%" height="15" fill="rgb(221,78,26)" fg:x="1277" fg:w="2"/><text x="76.9007%" y="175.50"></text></g><g><title>malloc_mutex_unlock (1 samples, 0.06%)</title><rect x="76.7107%" y="149" width="0.0600%" height="15" fill="rgb(250,127,30)" fg:x="1278" fg:w="1"/><text x="76.9607%" y="159.50"></text></g><g><title>[libc.so.6] (1 samples, 0.06%)</title><rect x="76.7107%" y="133" width="0.0600%" height="15" fill="rgb(230,49,44)" fg:x="1278" fg:w="1"/><text x="76.9607%" y="143.50"></text></g><g><title>imalloc_no_sample (1 samples, 0.06%)</title><rect x="77.1909%" y="293" width="0.0600%" height="15" fill="rgb(229,67,23)" fg:x="1286" fg:w="1"/><text x="77.4409%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (9 samples, 0.54%)</title><rect x="76.7707%" y="373" width="0.5402%" height="15" fill="rgb(249,83,47)" fg:x="1279" fg:w="9"/><text x="77.0207%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.24%)</title><rect x="77.0708%" y="357" width="0.2401%" height="15" fill="rgb(215,43,3)" fg:x="1284" fg:w="4"/><text x="77.3208%" y="367.50"></text></g><g><title>_rjem_mallocx (3 samples, 0.18%)</title><rect x="77.1309%" y="341" width="0.1801%" height="15" fill="rgb(238,154,13)" fg:x="1285" fg:w="3"/><text x="77.3809%" y="351.50"></text></g><g><title>imalloc (2 samples, 0.12%)</title><rect x="77.1909%" y="325" width="0.1200%" height="15" fill="rgb(219,56,2)" fg:x="1286" fg:w="2"/><text x="77.4409%" y="335.50"></text></g><g><title>imalloc_body (2 samples, 0.12%)</title><rect x="77.1909%" y="309" width="0.1200%" height="15" fill="rgb(233,0,4)" fg:x="1286" fg:w="2"/><text x="77.4409%" y="319.50"></text></g><g><title>sz_index2size (1 samples, 0.06%)</title><rect x="77.2509%" y="293" width="0.0600%" height="15" fill="rgb(235,30,7)" fg:x="1287" fg:w="1"/><text x="77.5009%" y="303.50"></text></g><g><title>sz_index2size_lookup (1 samples, 0.06%)</title><rect x="77.2509%" y="277" width="0.0600%" height="15" fill="rgb(250,79,13)" fg:x="1287" fg:w="1"/><text x="77.5009%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (6 samples, 0.36%)</title><rect x="77.3109%" y="373" width="0.3601%" height="15" fill="rgb(211,146,34)" fg:x="1288" fg:w="6"/><text x="77.5609%" y="383.50"></text></g><g><title>[libc.so.6] (2 samples, 0.12%)</title><rect x="77.5510%" y="357" width="0.1200%" height="15" fill="rgb(228,22,38)" fg:x="1292" fg:w="2"/><text x="77.8010%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.06%)</title><rect x="77.6711%" y="373" width="0.0600%" height="15" fill="rgb(235,168,5)" fg:x="1294" fg:w="1"/><text x="77.9211%" y="383.50"></text></g><g><title>&lt;rayon::iter::extend::ListReducer as rayon::iter::plumbing::Reducer&lt;alloc::collections::linked_list::LinkedList&lt;T&gt;&gt;&gt;::reduce (2 samples, 0.12%)</title><rect x="77.9112%" y="357" width="0.1200%" height="15" fill="rgb(221,155,16)" fg:x="1298" fg:w="2"/><text x="78.1612%" y="367.50"></text></g><g><title>core::bool::&lt;impl bool&gt;::then (1 samples, 0.06%)</title><rect x="79.1116%" y="293" width="0.0600%" height="15" fill="rgb(215,215,53)" fg:x="1318" fg:w="1"/><text x="79.3616%" y="303.50"></text></g><g><title>std::sys::unix::futex::futex_wait (5 samples, 0.30%)</title><rect x="79.1116%" y="309" width="0.3001%" height="15" fill="rgb(223,4,10)" fg:x="1318" fg:w="5"/><text x="79.3616%" y="319.50"></text></g><g><title>syscall (4 samples, 0.24%)</title><rect x="79.1717%" y="293" width="0.2401%" height="15" fill="rgb(234,103,6)" fg:x="1319" fg:w="4"/><text x="79.4217%" y="303.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (6 samples, 0.36%)</title><rect x="79.1116%" y="325" width="0.3601%" height="15" fill="rgb(227,97,0)" fg:x="1318" fg:w="6"/><text x="79.3616%" y="335.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (1 samples, 0.06%)</title><rect x="79.4118%" y="309" width="0.0600%" height="15" fill="rgb(234,150,53)" fg:x="1323" fg:w="1"/><text x="79.6618%" y="319.50"></text></g><g><title>core::hint::spin_loop (1 samples, 0.06%)</title><rect x="79.4118%" y="293" width="0.0600%" height="15" fill="rgb(228,201,54)" fg:x="1323" fg:w="1"/><text x="79.6618%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (1 samples, 0.06%)</title><rect x="79.4118%" y="277" width="0.0600%" height="15" fill="rgb(222,22,37)" fg:x="1323" fg:w="1"/><text x="79.6618%" y="287.50"></text></g><g><title>rayon_core::latch::LockLatch::wait_and_reset (241 samples, 14.47%)</title><rect x="78.2713%" y="341" width="14.4658%" height="15" fill="rgb(237,53,32)" fg:x="1304" fg:w="241"/><text x="78.5213%" y="351.50">rayon_core::latch::Loc..</text></g><g><title>syscall (221 samples, 13.27%)</title><rect x="79.4718%" y="325" width="13.2653%" height="15" fill="rgb(233,25,53)" fg:x="1324" fg:w="221"/><text x="79.7218%" y="335.50">syscall</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (257 samples, 15.43%)</title><rect x="77.7311%" y="373" width="15.4262%" height="15" fill="rgb(210,40,34)" fg:x="1295" fg:w="257"/><text x="77.9811%" y="383.50">rayon::iter::plumbing::b..</text></g><g><title>rayon_core::registry::Registry::in_worker_cold (252 samples, 15.13%)</title><rect x="78.0312%" y="357" width="15.1261%" height="15" fill="rgb(241,220,44)" fg:x="1300" fg:w="252"/><text x="78.2812%" y="367.50">rayon_core::registry::R..</text></g><g><title>rayon_core::registry::Registry::inject (7 samples, 0.42%)</title><rect x="92.7371%" y="341" width="0.4202%" height="15" fill="rgb(235,28,35)" fg:x="1545" fg:w="7"/><text x="92.9871%" y="351.50"></text></g><g><title>&lt;melon::world::World as melon::entity_builder::SpawnLocation&gt;::spawn (306 samples, 18.37%)</title><rect x="75.1501%" y="405" width="18.3673%" height="15" fill="rgb(210,56,17)" fg:x="1252" fg:w="306"/><text x="75.4001%" y="415.50">&lt;melon::world::World as melon..</text></g><g><title>melon::world::World::execute_changes (304 samples, 18.25%)</title><rect x="75.2701%" y="389" width="18.2473%" height="15" fill="rgb(224,130,29)" fg:x="1254" fg:w="304"/><text x="75.5201%" y="399.50">melon::world::World::execute..</text></g><g><title>rayon_core::registry::global_registry (6 samples, 0.36%)</title><rect x="93.1573%" y="373" width="0.3601%" height="15" fill="rgb(235,212,8)" fg:x="1552" fg:w="6"/><text x="93.4073%" y="383.50"></text></g><g><title>std::sys_common::once::futex::Once::call (6 samples, 0.36%)</title><rect x="93.1573%" y="357" width="0.3601%" height="15" fill="rgb(223,33,50)" fg:x="1552" fg:w="6"/><text x="93.4073%" y="367.50"></text></g><g><title>std::sys::unix::thread::Thread::new (6 samples, 0.36%)</title><rect x="93.1573%" y="341" width="0.3601%" height="15" fill="rgb(219,149,13)" fg:x="1552" fg:w="6"/><text x="93.4073%" y="351.50"></text></g><g><title>pthread_create (6 samples, 0.36%)</title><rect x="93.1573%" y="325" width="0.3601%" height="15" fill="rgb(250,156,29)" fg:x="1552" fg:w="6"/><text x="93.4073%" y="335.50"></text></g><g><title>[libc.so.6] (1 samples, 0.06%)</title><rect x="93.4574%" y="309" width="0.0600%" height="15" fill="rgb(216,193,19)" fg:x="1557" fg:w="1"/><text x="93.7074%" y="319.50"></text></g><g><title>[libc.so.6] (1 samples, 0.06%)</title><rect x="93.4574%" y="293" width="0.0600%" height="15" fill="rgb(216,135,14)" fg:x="1557" fg:w="1"/><text x="93.7074%" y="303.50"></text></g><g><title>_rjem_mallocx (1 samples, 0.06%)</title><rect x="93.5174%" y="405" width="0.0600%" height="15" fill="rgb(241,47,5)" fg:x="1558" fg:w="1"/><text x="93.7674%" y="415.50"></text></g><g><title>imalloc (1 samples, 0.06%)</title><rect x="93.5174%" y="389" width="0.0600%" height="15" fill="rgb(233,42,35)" fg:x="1558" fg:w="1"/><text x="93.7674%" y="399.50"></text></g><g><title>imalloc_body (1 samples, 0.06%)</title><rect x="93.5174%" y="373" width="0.0600%" height="15" fill="rgb(231,13,6)" fg:x="1558" fg:w="1"/><text x="93.7674%" y="383.50"></text></g><g><title>imalloc_no_sample (1 samples, 0.06%)</title><rect x="93.5174%" y="357" width="0.0600%" height="15" fill="rgb(207,181,40)" fg:x="1558" fg:w="1"/><text x="93.7674%" y="367.50"></text></g><g><title>iallocztm (1 samples, 0.06%)</title><rect x="93.5174%" y="341" width="0.0600%" height="15" fill="rgb(254,173,49)" fg:x="1558" fg:w="1"/><text x="93.7674%" y="351.50"></text></g><g><title>arena_malloc (1 samples, 0.06%)</title><rect x="93.5174%" y="325" width="0.0600%" height="15" fill="rgb(221,1,38)" fg:x="1558" fg:w="1"/><text x="93.7674%" y="335.50"></text></g><g><title>tcache_alloc_small (1 samples, 0.06%)</title><rect x="93.5174%" y="309" width="0.0600%" height="15" fill="rgb(206,124,46)" fg:x="1558" fg:w="1"/><text x="93.7674%" y="319.50"></text></g><g><title>cache_bin_alloc_easy (1 samples, 0.06%)</title><rect x="93.5174%" y="293" width="0.0600%" height="15" fill="rgb(249,21,11)" fg:x="1558" fg:w="1"/><text x="93.7674%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="93.5774%" y="373" width="0.0600%" height="15" fill="rgb(222,201,40)" fg:x="1559" fg:w="1"/><text x="93.8274%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.12%)</title><rect x="93.5774%" y="405" width="0.1200%" height="15" fill="rgb(235,61,29)" fg:x="1559" fg:w="2"/><text x="93.8274%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.12%)</title><rect x="93.5774%" y="389" width="0.1200%" height="15" fill="rgb(219,207,3)" fg:x="1559" fg:w="2"/><text x="93.8274%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="93.6375%" y="373" width="0.0600%" height="15" fill="rgb(222,56,46)" fg:x="1560" fg:w="1"/><text x="93.8875%" y="383.50"></text></g><g><title>_rjem_mallocx (1 samples, 0.06%)</title><rect x="93.6375%" y="357" width="0.0600%" height="15" fill="rgb(239,76,54)" fg:x="1560" fg:w="1"/><text x="93.8875%" y="367.50"></text></g><g><title>imalloc (1 samples, 0.06%)</title><rect x="93.6375%" y="341" width="0.0600%" height="15" fill="rgb(231,124,27)" fg:x="1560" fg:w="1"/><text x="93.8875%" y="351.50"></text></g><g><title>imalloc_body (1 samples, 0.06%)</title><rect x="93.6375%" y="325" width="0.0600%" height="15" fill="rgb(249,195,6)" fg:x="1560" fg:w="1"/><text x="93.8875%" y="335.50"></text></g><g><title>imalloc_no_sample (1 samples, 0.06%)</title><rect x="93.6375%" y="309" width="0.0600%" height="15" fill="rgb(237,174,47)" fg:x="1560" fg:w="1"/><text x="93.8875%" y="319.50"></text></g><g><title>iallocztm (1 samples, 0.06%)</title><rect x="93.6375%" y="293" width="0.0600%" height="15" fill="rgb(206,201,31)" fg:x="1560" fg:w="1"/><text x="93.8875%" y="303.50"></text></g><g><title>arena_malloc (1 samples, 0.06%)</title><rect x="93.6375%" y="277" width="0.0600%" height="15" fill="rgb(231,57,52)" fg:x="1560" fg:w="1"/><text x="93.8875%" y="287.50"></text></g><g><title>tcache_alloc_small (1 samples, 0.06%)</title><rect x="93.6375%" y="261" width="0.0600%" height="15" fill="rgb(248,177,22)" fg:x="1560" fg:w="1"/><text x="93.8875%" y="271.50"></text></g><g><title>_rjem_je_tcache_alloc_small_hard (1 samples, 0.06%)</title><rect x="93.6375%" y="245" width="0.0600%" height="15" fill="rgb(215,211,37)" fg:x="1560" fg:w="1"/><text x="93.8875%" y="255.50"></text></g><g><title>_rjem_je_arena_tcache_fill_small (1 samples, 0.06%)</title><rect x="93.6375%" y="229" width="0.0600%" height="15" fill="rgb(241,128,51)" fg:x="1560" fg:w="1"/><text x="93.8875%" y="239.50"></text></g><g><title>arena_slab_reg_alloc (1 samples, 0.06%)</title><rect x="93.6375%" y="213" width="0.0600%" height="15" fill="rgb(227,165,31)" fg:x="1560" fg:w="1"/><text x="93.8875%" y="223.50"></text></g><g><title>bitmap_sfu (1 samples, 0.06%)</title><rect x="93.6375%" y="197" width="0.0600%" height="15" fill="rgb(228,167,24)" fg:x="1560" fg:w="1"/><text x="93.8875%" y="207.50"></text></g><g><title>ffs_lu (1 samples, 0.06%)</title><rect x="93.6375%" y="181" width="0.0600%" height="15" fill="rgb(228,143,12)" fg:x="1560" fg:w="1"/><text x="93.8875%" y="191.50"></text></g><g><title>_rjem_sdallocx (2 samples, 0.12%)</title><rect x="93.6975%" y="389" width="0.1200%" height="15" fill="rgb(249,149,8)" fg:x="1561" fg:w="2"/><text x="93.9475%" y="399.50"></text></g><g><title>isfree (2 samples, 0.12%)</title><rect x="93.6975%" y="373" width="0.1200%" height="15" fill="rgb(243,35,44)" fg:x="1561" fg:w="2"/><text x="93.9475%" y="383.50"></text></g><g><title>isdalloct (2 samples, 0.12%)</title><rect x="93.6975%" y="357" width="0.1200%" height="15" fill="rgb(246,89,9)" fg:x="1561" fg:w="2"/><text x="93.9475%" y="367.50"></text></g><g><title>arena_sdalloc (2 samples, 0.12%)</title><rect x="93.6975%" y="341" width="0.1200%" height="15" fill="rgb(233,213,13)" fg:x="1561" fg:w="2"/><text x="93.9475%" y="351.50"></text></g><g><title>tcache_dalloc_small (2 samples, 0.12%)</title><rect x="93.6975%" y="325" width="0.1200%" height="15" fill="rgb(233,141,41)" fg:x="1561" fg:w="2"/><text x="93.9475%" y="335.50"></text></g><g><title>_rjem_je_tcache_bin_flush_small (2 samples, 0.12%)</title><rect x="93.6975%" y="309" width="0.1200%" height="15" fill="rgb(239,167,4)" fg:x="1561" fg:w="2"/><text x="93.9475%" y="319.50"></text></g><g><title>_rjem_je_arena_dalloc_bin_junked_locked (1 samples, 0.06%)</title><rect x="93.7575%" y="293" width="0.0600%" height="15" fill="rgb(209,217,16)" fg:x="1562" fg:w="1"/><text x="94.0075%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;melon::world::World&gt; (4 samples, 0.24%)</title><rect x="93.6975%" y="405" width="0.2401%" height="15" fill="rgb(219,88,35)" fg:x="1561" fg:w="4"/><text x="93.9475%" y="415.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.12%)</title><rect x="93.8175%" y="389" width="0.1200%" height="15" fill="rgb(220,193,23)" fg:x="1563" fg:w="2"/><text x="94.0675%" y="399.50"></text></g><g><title>_rjem_sdallocx (2 samples, 0.12%)</title><rect x="93.8175%" y="373" width="0.1200%" height="15" fill="rgb(230,90,52)" fg:x="1563" fg:w="2"/><text x="94.0675%" y="383.50"></text></g><g><title>isfree (2 samples, 0.12%)</title><rect x="93.8175%" y="357" width="0.1200%" height="15" fill="rgb(252,106,19)" fg:x="1563" fg:w="2"/><text x="94.0675%" y="367.50"></text></g><g><title>isdalloct (2 samples, 0.12%)</title><rect x="93.8175%" y="341" width="0.1200%" height="15" fill="rgb(206,74,20)" fg:x="1563" fg:w="2"/><text x="94.0675%" y="351.50"></text></g><g><title>arena_sdalloc (2 samples, 0.12%)</title><rect x="93.8175%" y="325" width="0.1200%" height="15" fill="rgb(230,138,44)" fg:x="1563" fg:w="2"/><text x="94.0675%" y="335.50"></text></g><g><title>tcache_dalloc_small (2 samples, 0.12%)</title><rect x="93.8175%" y="309" width="0.1200%" height="15" fill="rgb(235,182,43)" fg:x="1563" fg:w="2"/><text x="94.0675%" y="319.50"></text></g><g><title>_rjem_je_tcache_bin_flush_small (1 samples, 0.06%)</title><rect x="93.8776%" y="293" width="0.0600%" height="15" fill="rgb(242,16,51)" fg:x="1564" fg:w="1"/><text x="94.1276%" y="303.50"></text></g><g><title>_rjem_je_arena_dalloc_bin_junked_locked (1 samples, 0.06%)</title><rect x="93.8776%" y="277" width="0.0600%" height="15" fill="rgb(248,9,4)" fg:x="1564" fg:w="1"/><text x="94.1276%" y="287.50"></text></g><g><title>arena_dalloc_bin_locked_impl (1 samples, 0.06%)</title><rect x="93.8776%" y="261" width="0.0600%" height="15" fill="rgb(210,31,22)" fg:x="1564" fg:w="1"/><text x="94.1276%" y="271.50"></text></g><g><title>arena_slab_reg_dalloc (1 samples, 0.06%)</title><rect x="93.8776%" y="245" width="0.0600%" height="15" fill="rgb(239,54,39)" fg:x="1564" fg:w="1"/><text x="94.1276%" y="255.50"></text></g><g><title>bitmap_unset (1 samples, 0.06%)</title><rect x="93.8776%" y="229" width="0.0600%" height="15" fill="rgb(230,99,41)" fg:x="1564" fg:w="1"/><text x="94.1276%" y="239.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (319 samples, 19.15%)</title><rect x="74.8499%" y="869" width="19.1477%" height="15" fill="rgb(253,106,12)" fg:x="1247" fg:w="319"/><text x="75.0999%" y="879.50">std::thread::Builder::spawn_un..</text></g><g><title>std::panic::catch_unwind (319 samples, 19.15%)</title><rect x="74.8499%" y="853" width="19.1477%" height="15" fill="rgb(213,46,41)" fg:x="1247" fg:w="319"/><text x="75.0999%" y="863.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (319 samples, 19.15%)</title><rect x="74.8499%" y="837" width="19.1477%" height="15" fill="rgb(215,133,35)" fg:x="1247" fg:w="319"/><text x="75.0999%" y="847.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (319 samples, 19.15%)</title><rect x="74.8499%" y="821" width="19.1477%" height="15" fill="rgb(213,28,5)" fg:x="1247" fg:w="319"/><text x="75.0999%" y="831.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (319 samples, 19.15%)</title><rect x="74.8499%" y="805" width="19.1477%" height="15" fill="rgb(215,77,49)" fg:x="1247" fg:w="319"/><text x="75.0999%" y="815.50">&lt;core::panic::unwind_safe::Ass..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (319 samples, 19.15%)</title><rect x="74.8499%" y="789" width="19.1477%" height="15" fill="rgb(248,100,22)" fg:x="1247" fg:w="319"/><text x="75.0999%" y="799.50">std::thread::Builder::spawn_un..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (319 samples, 19.15%)</title><rect x="74.8499%" y="773" width="19.1477%" height="15" fill="rgb(208,67,9)" fg:x="1247" fg:w="319"/><text x="75.0999%" y="783.50">std::sys_common::backtrace::__..</text></g><g><title>test::run_test::run_test_inner::{{closure}} (319 samples, 19.15%)</title><rect x="74.8499%" y="757" width="19.1477%" height="15" fill="rgb(219,133,21)" fg:x="1247" fg:w="319"/><text x="75.0999%" y="767.50">test::run_test::run_test_inner..</text></g><g><title>test::run_test::run_test_inner::{{closure}} (319 samples, 19.15%)</title><rect x="74.8499%" y="741" width="19.1477%" height="15" fill="rgb(246,46,29)" fg:x="1247" fg:w="319"/><text x="75.0999%" y="751.50">test::run_test::run_test_inner..</text></g><g><title>test::run_test_in_process (319 samples, 19.15%)</title><rect x="74.8499%" y="725" width="19.1477%" height="15" fill="rgb(246,185,52)" fg:x="1247" fg:w="319"/><text x="75.0999%" y="735.50">test::run_test_in_process</text></g><g><title>std::panic::catch_unwind (319 samples, 19.15%)</title><rect x="74.8499%" y="709" width="19.1477%" height="15" fill="rgb(252,136,11)" fg:x="1247" fg:w="319"/><text x="75.0999%" y="719.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (319 samples, 19.15%)</title><rect x="74.8499%" y="693" width="19.1477%" height="15" fill="rgb(219,138,53)" fg:x="1247" fg:w="319"/><text x="75.0999%" y="703.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (319 samples, 19.15%)</title><rect x="74.8499%" y="677" width="19.1477%" height="15" fill="rgb(211,51,23)" fg:x="1247" fg:w="319"/><text x="75.0999%" y="687.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (319 samples, 19.15%)</title><rect x="74.8499%" y="661" width="19.1477%" height="15" fill="rgb(247,221,28)" fg:x="1247" fg:w="319"/><text x="75.0999%" y="671.50">&lt;core::panic::unwind_safe::Ass..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (319 samples, 19.15%)</title><rect x="74.8499%" y="645" width="19.1477%" height="15" fill="rgb(251,222,45)" fg:x="1247" fg:w="319"/><text x="75.0999%" y="655.50">&lt;alloc::boxed::Box&lt;F,A&gt; as cor..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (319 samples, 19.15%)</title><rect x="74.8499%" y="629" width="19.1477%" height="15" fill="rgb(217,162,53)" fg:x="1247" fg:w="319"/><text x="75.0999%" y="639.50">core::ops::function::FnOnce::c..</text></g><g><title>test::run_test::{{closure}} (319 samples, 19.15%)</title><rect x="74.8499%" y="613" width="19.1477%" height="15" fill="rgb(229,93,14)" fg:x="1247" fg:w="319"/><text x="75.0999%" y="623.50">test::run_test::{{closure}}</text></g><g><title>test::__rust_begin_short_backtrace (319 samples, 19.15%)</title><rect x="74.8499%" y="597" width="19.1477%" height="15" fill="rgb(209,67,49)" fg:x="1247" fg:w="319"/><text x="75.0999%" y="607.50">test::__rust_begin_short_backt..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (319 samples, 19.15%)</title><rect x="74.8499%" y="581" width="19.1477%" height="15" fill="rgb(213,87,29)" fg:x="1247" fg:w="319"/><text x="75.0999%" y="591.50">&lt;alloc::boxed::Box&lt;F,A&gt; as cor..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (319 samples, 19.15%)</title><rect x="74.8499%" y="565" width="19.1477%" height="15" fill="rgb(205,151,52)" fg:x="1247" fg:w="319"/><text x="75.0999%" y="575.50">core::ops::function::FnOnce::c..</text></g><g><title>test::convert_benchmarks_to_tests::{{closure}}::{{closure}} (319 samples, 19.15%)</title><rect x="74.8499%" y="549" width="19.1477%" height="15" fill="rgb(253,215,39)" fg:x="1247" fg:w="319"/><text x="75.0999%" y="559.50">test::convert_benchmarks_to_te..</text></g><g><title>test::bench::run_once (319 samples, 19.15%)</title><rect x="74.8499%" y="533" width="19.1477%" height="15" fill="rgb(221,220,41)" fg:x="1247" fg:w="319"/><text x="75.0999%" y="543.50">test::bench::run_once</text></g><g><title>test::bench::Bencher::bench (319 samples, 19.15%)</title><rect x="74.8499%" y="517" width="19.1477%" height="15" fill="rgb(218,133,21)" fg:x="1247" fg:w="319"/><text x="75.0999%" y="527.50">test::bench::Bencher::bench</text></g><g><title>test::convert_benchmarks_to_tests::{{closure}}::{{closure}}::{{closure}} (319 samples, 19.15%)</title><rect x="74.8499%" y="501" width="19.1477%" height="15" fill="rgb(221,193,43)" fg:x="1247" fg:w="319"/><text x="75.0999%" y="511.50">test::convert_benchmarks_to_te..</text></g><g><title>test::__rust_begin_short_backtrace (319 samples, 19.15%)</title><rect x="74.8499%" y="485" width="19.1477%" height="15" fill="rgb(240,128,52)" fg:x="1247" fg:w="319"/><text x="75.0999%" y="495.50">test::__rust_begin_short_backt..</text></g><g><title>test::FilteredTests::add_bench_as_test::{{closure}}::{{closure}}::{{closure}} (319 samples, 19.15%)</title><rect x="74.8499%" y="469" width="19.1477%" height="15" fill="rgb(253,114,12)" fg:x="1247" fg:w="319"/><text x="75.0999%" y="479.50">test::FilteredTests::add_bench..</text></g><g><title>core::ops::function::Fn::call (319 samples, 19.15%)</title><rect x="74.8499%" y="453" width="19.1477%" height="15" fill="rgb(215,223,47)" fg:x="1247" fg:w="319"/><text x="75.0999%" y="463.50">core::ops::function::Fn::call</text></g><g><title>core::ops::function::FnOnce::call_once (319 samples, 19.15%)</title><rect x="74.8499%" y="437" width="19.1477%" height="15" fill="rgb(248,225,23)" fg:x="1247" fg:w="319"/><text x="75.0999%" y="447.50">core::ops::function::FnOnce::c..</text></g><g><title>test::bench::ns_iter_inner (319 samples, 19.15%)</title><rect x="74.8499%" y="421" width="19.1477%" height="15" fill="rgb(250,108,0)" fg:x="1247" fg:w="319"/><text x="75.0999%" y="431.50">test::bench::ns_iter_inner</text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (1 samples, 0.06%)</title><rect x="93.9376%" y="405" width="0.0600%" height="15" fill="rgb(228,208,7)" fg:x="1565" fg:w="1"/><text x="94.1876%" y="415.50"></text></g><g><title>__mmap (5 samples, 0.30%)</title><rect x="94.6579%" y="757" width="0.3001%" height="15" fill="rgb(244,45,10)" fg:x="1577" fg:w="5"/><text x="94.9079%" y="767.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1,501 samples, 90.10%)</title><rect x="4.9220%" y="917" width="90.0960%" height="15" fill="rgb(207,125,25)" fg:x="82" fg:w="1501"/><text x="5.1720%" y="927.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1,501 samples, 90.10%)</title><rect x="4.9220%" y="901" width="90.0960%" height="15" fill="rgb(210,195,18)" fg:x="82" fg:w="1501"/><text x="5.1720%" y="911.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1,501 samples, 90.10%)</title><rect x="4.9220%" y="885" width="90.0960%" height="15" fill="rgb(249,80,12)" fg:x="82" fg:w="1501"/><text x="5.1720%" y="895.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::try_initialize (17 samples, 1.02%)</title><rect x="93.9976%" y="869" width="1.0204%" height="15" fill="rgb(221,65,9)" fg:x="1566" fg:w="17"/><text x="94.2476%" y="879.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::try_register_dtor (17 samples, 1.02%)</title><rect x="93.9976%" y="853" width="1.0204%" height="15" fill="rgb(235,49,36)" fg:x="1566" fg:w="17"/><text x="94.2476%" y="863.50"></text></g><g><title>__cxa_thread_atexit_impl (17 samples, 1.02%)</title><rect x="93.9976%" y="837" width="1.0204%" height="15" fill="rgb(225,32,20)" fg:x="1566" fg:w="17"/><text x="94.2476%" y="847.50"></text></g><g><title>__libc_calloc (17 samples, 1.02%)</title><rect x="93.9976%" y="821" width="1.0204%" height="15" fill="rgb(215,141,46)" fg:x="1566" fg:w="17"/><text x="94.2476%" y="831.50"></text></g><g><title>[libc.so.6] (17 samples, 1.02%)</title><rect x="93.9976%" y="805" width="1.0204%" height="15" fill="rgb(250,160,47)" fg:x="1566" fg:w="17"/><text x="94.2476%" y="815.50"></text></g><g><title>[libc.so.6] (16 samples, 0.96%)</title><rect x="94.0576%" y="789" width="0.9604%" height="15" fill="rgb(216,222,40)" fg:x="1567" fg:w="16"/><text x="94.3076%" y="799.50"></text></g><g><title>[libc.so.6] (16 samples, 0.96%)</title><rect x="94.0576%" y="773" width="0.9604%" height="15" fill="rgb(234,217,39)" fg:x="1567" fg:w="16"/><text x="94.3076%" y="783.50"></text></g><g><title>__sched_cpucount (1 samples, 0.06%)</title><rect x="94.9580%" y="757" width="0.0600%" height="15" fill="rgb(207,178,40)" fg:x="1582" fg:w="1"/><text x="95.2080%" y="767.50"></text></g><g><title>[libc.so.6] (1,508 samples, 90.52%)</title><rect x="4.8019%" y="965" width="90.5162%" height="15" fill="rgb(221,136,13)" fg:x="80" fg:w="1508"/><text x="5.0519%" y="975.50">[libc.so.6]</text></g><g><title>[libc.so.6] (1,507 samples, 90.46%)</title><rect x="4.8619%" y="949" width="90.4562%" height="15" fill="rgb(249,199,10)" fg:x="81" fg:w="1507"/><text x="5.1119%" y="959.50">[libc.so.6]</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (1,506 samples, 90.40%)</title><rect x="4.9220%" y="933" width="90.3962%" height="15" fill="rgb(249,222,13)" fg:x="82" fg:w="1506"/><text x="5.1720%" y="943.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (5 samples, 0.30%)</title><rect x="95.0180%" y="917" width="0.3001%" height="15" fill="rgb(244,185,38)" fg:x="1583" fg:w="5"/><text x="95.2680%" y="927.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (5 samples, 0.30%)</title><rect x="95.0180%" y="901" width="0.3001%" height="15" fill="rgb(236,202,9)" fg:x="1583" fg:w="5"/><text x="95.2680%" y="911.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (5 samples, 0.30%)</title><rect x="95.0180%" y="885" width="0.3001%" height="15" fill="rgb(250,229,37)" fg:x="1583" fg:w="5"/><text x="95.2680%" y="895.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (5 samples, 0.30%)</title><rect x="95.0180%" y="869" width="0.3001%" height="15" fill="rgb(206,174,23)" fg:x="1583" fg:w="5"/><text x="95.2680%" y="879.50"></text></g><g><title>__mmap (5 samples, 0.30%)</title><rect x="95.0180%" y="853" width="0.3001%" height="15" fill="rgb(211,33,43)" fg:x="1583" fg:w="5"/><text x="95.2680%" y="863.50"></text></g><g><title>[libc.so.6] (1 samples, 0.06%)</title><rect x="95.3181%" y="949" width="0.0600%" height="15" fill="rgb(245,58,50)" fg:x="1588" fg:w="1"/><text x="95.5681%" y="959.50"></text></g><g><title>__sched_yield (4 samples, 0.24%)</title><rect x="95.3782%" y="949" width="0.2401%" height="15" fill="rgb(244,68,36)" fg:x="1589" fg:w="4"/><text x="95.6282%" y="959.50"></text></g><g><title>_rjem_mallocx (3 samples, 0.18%)</title><rect x="95.6182%" y="949" width="0.1801%" height="15" fill="rgb(232,229,15)" fg:x="1593" fg:w="3"/><text x="95.8682%" y="959.50"></text></g><g><title>base_alloc_impl (1 samples, 0.06%)</title><rect x="95.7983%" y="949" width="0.0600%" height="15" fill="rgb(254,30,23)" fg:x="1596" fg:w="1"/><text x="96.0483%" y="959.50"></text></g><g><title>core::iter::adapters::filter::filter_try_fold::{{closure}} (46 samples, 2.76%)</title><rect x="95.8583%" y="949" width="2.7611%" height="15" fill="rgb(235,160,14)" fg:x="1597" fg:w="46"/><text x="96.1083%" y="959.50">co..</text></g><g><title>crossbeam_epoch::default::with_handle (8 samples, 0.48%)</title><rect x="98.6194%" y="949" width="0.4802%" height="15" fill="rgb(212,155,44)" fg:x="1643" fg:w="8"/><text x="98.8694%" y="959.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (1 samples, 0.06%)</title><rect x="99.0996%" y="949" width="0.0600%" height="15" fill="rgb(226,2,50)" fg:x="1651" fg:w="1"/><text x="99.3496%" y="959.50"></text></g><g><title>crossbeam_epoch::internal::Global::try_advance (1 samples, 0.06%)</title><rect x="99.1597%" y="949" width="0.0600%" height="15" fill="rgb(234,177,6)" fg:x="1652" fg:w="1"/><text x="99.4097%" y="959.50"></text></g><g><title>melon::world::World::execute_changes (1 samples, 0.06%)</title><rect x="99.2197%" y="949" width="0.0600%" height="15" fill="rgb(217,24,9)" fg:x="1653" fg:w="1"/><text x="99.4697%" y="959.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (1 samples, 0.06%)</title><rect x="99.2797%" y="949" width="0.0600%" height="15" fill="rgb(220,13,46)" fg:x="1654" fg:w="1"/><text x="99.5297%" y="959.50"></text></g><g><title>rayon_core::latch::LockLatch::wait_and_reset (2 samples, 0.12%)</title><rect x="99.3397%" y="949" width="0.1200%" height="15" fill="rgb(239,221,27)" fg:x="1655" fg:w="2"/><text x="99.5897%" y="959.50"></text></g><g><title>rayon_core::registry::global_registry (1 samples, 0.06%)</title><rect x="99.4598%" y="949" width="0.0600%" height="15" fill="rgb(222,198,25)" fg:x="1657" fg:w="1"/><text x="99.7098%" y="959.50"></text></g><g><title>[unknown] (77 samples, 4.62%)</title><rect x="95.3181%" y="965" width="4.6218%" height="15" fill="rgb(211,99,13)" fg:x="1588" fg:w="77"/><text x="95.5681%" y="975.50">[unkn..</text></g><g><title>syscall (7 samples, 0.42%)</title><rect x="99.5198%" y="949" width="0.4202%" height="15" fill="rgb(232,111,31)" fg:x="1658" fg:w="7"/><text x="99.7698%" y="959.50"></text></g><g><title>all (1,666 samples, 100%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(245,82,37)" fg:x="0" fg:w="1666"/><text x="0.2500%" y="1007.50"></text></g><g><title>insert_test (1,654 samples, 99.28%)</title><rect x="0.7203%" y="981" width="99.2797%" height="15" fill="rgb(227,149,46)" fg:x="12" fg:w="1654"/><text x="0.9703%" y="991.50">insert_test</text></g><g><title>core::iter::adapters::filter::filter_try_fold::{{closure}} (1 samples, 0.06%)</title><rect x="99.9400%" y="965" width="0.0600%" height="15" fill="rgb(218,36,50)" fg:x="1665" fg:w="1"/><text x="100.1900%" y="975.50"></text></g></svg></svg>